* CHECK IF THERE IS A PATH FROM A TO B WITH A DEPTH FIRST SEARCH
* IF IT DOES, RESULT WILL HAVE AN EDGE TO ITSELF UPON RETURNING
* IF IT DOES NOT, RESULT WILL NOT HAVE AN EDGE TO ITSELF UPON RETURNING
SUBROUTINE DEPTH FIRST CHECK(A, B, RESULT)
  LET RESULT < RESULT
  CALL DF(A, B, RESULT, 0)
END DEPTH FIRST CHECK

SUBROUTINE DF(A, B, RESULT, MARKERS)
  IF A = B
    LET RESULT > RESULT
    RETURN
  END IF
  LET MARKERS > A
  DO N < A
    IF MARKERS > N
    ELSE
      CALL DF(N, B, RESULT, MARKERS)
      IF RESULT > RESULT
        RETURN
      END IF
    END IF
  END DO
END DF

* CHECK IF THERE IS A PATH FROM A TO B WITH A BREADTH FIRST SEARCH
* IF IT DOES, RESULT WILL HAVE AN EDGE TO ITSELF UPON RETURNING
* IF IT DOES NOT, RESULT WILL NOT HAVE AN EDGE TO ITSELF UPON RETURNING
SUBROUTINE BREADTH FIRST CHECK(A, B, RESULT)
  LET RESULT < RESULT
  LET LEVEL > A
  DO LOOP
    LET MAX DEPTH FLAG > MAX DEPTH FLAG
    DO N < LEVEL
      LET MAX DEPTH FLAG < MAX DEPTH FLAG
      LET LEVEL < N
      IF N = B
        LET RESULT > RESULT
        RETURN
      ELSE IF MARKERS > N
      ELSE
        LET MARKERS > N
        DO NEXT < N
          LET LEVEL > NEXT
        END DO
      END IF
    END DO
    IF MAX DEPTH FLAG > MAX DEPTH FLAG
      RETURN
    END IF
  END DO
END BREADTH FIRST CHECK

LIBRARY PATH
  SUBROUTINE DEPTH FIRST CHECK
  SUBROUTINE BREADTH FIRST CHECK
END PATH
