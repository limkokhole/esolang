DGOL

DGOL (Directed Graph Oriented Language) is an imperative programming
language in which all values are pointers to nodes in directed
graphs.

Lexical structure

Linear whitespace is ignored.

Identifiers consist of 1 or more alphanumerical characters, excluding
"0".

Comments begin with "*" and extend to the end of the line, and may
only appear where a newline is allowed in the grammar.

Syntax

EBNF:

  program = { use-declaration | newline }, { subroutine-declaration | newline }, program-declaration, { newline };

  program-declaration = "PROGRAM", identifier, newline, statements, "END", identifier, newline;

  use-declaration = "USE", identifier, newline;

  subroutine-declaration = "SUBROUTINE", identifier, "(", [ identifier, { ",", identifier }, ")", newline, statements, "END", identifier, newline;

  statements = { [ statement ], newline };

  statement = let-statement | if-statement | do-statement | call-statement | return-statement | exit-statement;

  identifier-or-0 = identifier | "0"

  let-statement = "LET", identifier, ( "=", identifier-or-0 | "<", identifier | ">", identifier-or-0 );

  if-statement = if-head, { "ELSE", if-head }, [ "ELSE", newline, { statement, newline } ], "END", "IF";

  if-head = "IF", identifier, ( "=" | ">" ), identifier, newline, statements;

  do-statement = "DO", identifier, { "<", identifier }, newline, statements, "END", "DO";

  call-statement = "CALL", { identifier, "." }, identifier, [ "(", [ identifier-or-0, { ",", identifier-or-0 } ], ")" ];

  return-statement = "RETURN";

  exit-statement = "EXIT", identifier;

A node has an identity and a mutable set of edges, where each edge
points from itself to another node or back to itself.  A new node has
no edges.

Unreachable nodes and edges are garbage collected.

Variables are pointers to a node.  A variable is created when it is
first used, pointing at a new node.  Variables are scoped to the
subroutine or program in which they are used.  Each subroutine call
creates a new scope.

Subroutine parameters are passed by reference.  If a parameter is not
provided by the caller, it is set to a new node.  Any extraneous
parameters passed in by the caller are ignored.

Declarations

Use declarations import libraries.

The subroutines defined by the used library is available to the CALL
statement by using the name of the library, followed by "." followed
by the name of the subroutine.

Example

  USE IO * USE THE I/O LIBRARY

Subroutine declarations define subroutines.

The end of the subroutine is an implicit return.

Example

  * ASHNAZG SETS NAZG TO A NEW NODE IF ASH HAS AN EDGE TO ITSELF
  SUBROUTINE ASH NAZG(ASH, NAZG)
    DO ONE < ASH
      IF ONE = ASH
        LET NAZG = RING
        EXIT ONE
      END IF
    END DO
  END ASH NAZG

The program declaration defines the main entry point.

Example

  PROGRAM DEAGOL
    LET ASH > ASH
    LET NAZG = ASH
    IF ASH = NAZG
      * REACHED
    ENDIF
    CALLASHNAZG(ASH,NAZG)
    IF ASH = NAZG
      * NOT REACHED
    END IF
  END DEAGOL

Statements

Let statements

Example

  LET A = B * SET A TO B

  LET A = 0 * SET A TO A NEW NODE

  LET A > B * ADD AN EDGE FROM A TO B

  LET A < B * REMOVE ANY EDGE FROM A TO B

If statements

  IF A = B
    * REACHED IF A POINTS TO THE SAME NODE AS B POINTS TO
  ELSE IF A > B
    * REACHED IF THERE IS AN EDGE FROM A TO B
  END IF

Do statements

A do statement either iterates forever, or iterates over the edges
from a given node in some unspecified order.  The set of edges
iterated over is set on entry, and will be unaffected if the body of
the do statement changes the edges from the given node.

Example
  * REMOVE EVERY EDGE FROM NODE
  DO I < NODE
    LET NODE < I
  END DO

  * LOOP FOREVER
  DO J
  END DO

Call statements

A call statement calls the named subroutine with the given
parameters.

Subroutine that are defined in the program are referred
to by name.

Example

  CALL ASHNAZG(A, B)

Subroutines that are defined in a library are referred by the library
name, followed by ".", followed by the subroutine name.

Example

  CALL IO.READBYTE(BYTE, EOF, 1, 2, 4, 8, 10, 20, 40, 80)

Return statements

Return statements are only allowed in a subroutine.  When a return
statement is executed, control returns to the statement following the
call statement that invoked the subroutine.

Exit statements

Exit statements are only allowed in a do statement.  After an exit
statement is executed, execution continues after the containing do
statement with the identifier in the exit statement.

Example

  DO J < I
    DO K < J
      IF K = I
        EXIT J
      END IF
    END DO
  END DO

Standard Libraries

IO

  * THE IO LIBRARY DEFINES 2 SUBROUTINES

  * IO.READBYTE READS A BYTE
  * IF EOF IS ENCOUNTERED, AN EDGE IS ADDED FROM BYTE TO EOF,
  * OTHERWISE ANY EDGE FROM BYTE TO EOF IS REMOVED.
  * IF THE 1 BIT IS 1, AN EDGE IS ADDED FROM BYTE TO 1,
  * OTHERWISE ANY EDGE FROM BYTE TO 1 IS REMOVED.
  * IF THE 2 BIT IS 1, AN EDGE IS ADDED FROM BYTE TO 2,
  * OTHERWISE ANY EDGE FROM BYTE TO 2 IS REMOVED.
  * IF THE 4 BIT IS 1, AN EDGE IS ADDED FROM BYTE TO 4,
  * OTHERWISE ANY EDGE FROM BYTE TO 4 IS REMOVED.
  * IF THE 8 BIT IS 1, AN EDGE IS ADDED FROM BYTE TO 8,
  * OTHERWISE ANY EDGE FROM BYTE TO 8 IS REMOVED.
  * IF THE 16 BIT IS 1, AN EDGE IS ADDED FROM BYTE TO 10,
  * OTHERWISE ANY EDGE FROM BYTE TO 10 IS REMOVED.
  * IF THE 32 BIT IS 1, AN EDGE IS ADDED FROM BYTE TO 20,
  * OTHERWISE ANY EDGE FROM BYTE TO 20 IS REMOVED.
  * IF THE 64 BIT IS 1, AN EDGE IS ADDED FROM BYTE TO 40,
  * OTHERWISE ANY EDGE FROM BYTE TO 40 IS REMOVED.
  * IF THE 128 BIT IS 1, AN EDGE IS ADDED FROM BYTE TO 80,
  * OTHERWISE ANY EDGE FROM BYTE TO 80 IS REMOVED.
  * IF ANY ARGUMENT REFERS TO THE SAME NODE AS ANOTHER ARGUMENT, THE
  * RESULT IS UNDEFINED.
  SUBROUTINE READBYTE(BYTE, EOF, 1, 2, 4, 8, 10, 20, 40, 80)
    * UNSPECIFIED
  END READBYTE

  * IO.WRITEBYTE WRITES A BYTE
  * IF THERE IS AN EDGE FROM BYTE TO 1, THE 1 BIT IS 1, OTHERWISE IT IS 0.
  * IF THERE IS AN EDGE FROM BYTE TO 2, THE 2 BIT IS 1, OTHERWISE IT IS 0.
  * IF THERE IS AN EDGE FROM BYTE TO 4, THE 4 BIT IS 1, OTHERWISE IT IS 0.
  * IF THERE IS AN EDGE FROM BYTE TO 8, THE 8 BIT IS 1, OTHERWISE IT IS 0.
  * IF THERE IS AN EDGE FROM BYTE TO 10, THE 16 BIT IS 1, OTHERWISE IT IS 0.
  * IF THERE IS AN EDGE FROM BYTE TO 20, THE 32 BIT IS 1, OTHERWISE IT IS 0.
  * IF THERE IS AN EDGE FROM BYTE TO 40, THE 64 BIT IS 1, OTHERWISE IT IS 0.
  * IF THERE IS AN EDGE FROM BYTE TO 80, THE 128 BIT IS 1, OTHERWISE IT IS 0.
  SUBROUTINE WRITEBYTE(BYTE, 1, 2, 4, 8, 10, 20, 40, 80)
    * UNSPECIFIED
  END WRITEBYTE

Example

  * SETS RESULT TO A NEW NODE IF THERE IS A PATH FROM A TO B
  * BY DOING A DEPTH-FIRST SEARCH.  MARKERS MUST BE A NEW NODE.
  SUBROUTINE PATH BETWEEN(A, B, RESULT, MARKERS)
    IF A = B
      LET RESULT = 0
      RETURN
    ELSE IF A > B
      LET RESULT = 0
      RETURN
    END IF
    LET ORIGINAL RESULT = RESULT
    DO I < A
      IF MARKERS > I
        * skip
      ELSE
        LET MARKERS > I
        CALL PATH BETWEEN(I, B, RESULT, MARKERS)
        IF ORIGINAL RESULT = RESULT
        ELSE
          RETURN
        END IF
      END IF
    END DO
  END PATH BETWEEN

Example

  USE IO
  PROGRAM HELLO WORLD
    LET BYTE = 0
    LET 1 = 0
    LET BYTE > 1
    CALL IO.WRITE BYTE(BYTE, 0, 0, 0, 1, 0, 0, 1, 0)
    CALL IO.WRITE BYTE(BYTE, 1, 0, 1, 0, 0, 0, 1, 0)
    CALL IO.WRITE BYTE(BYTE, 0, 0, 1, 1, 0, 0, 1, 0)
    CALL IO.WRITE BYTE(BYTE, 0, 0, 1, 1, 0, 0, 1, 0)
    CALL IO.WRITE BYTE(BYTE, 1, 1, 1, 1, 0, 0, 1, 0)
    CALL IO.WRITE BYTE(BYTE, 0, 0, 0, 0, 0, 1, 0, 0)
    CALL IO.WRITE BYTE(BYTE, 1, 1, 1, 0, 1, 0, 1, 0)
    CALL IO.WRITE BYTE(BYTE, 1, 1, 1, 1, 0, 0, 1, 0)
    CALL IO.WRITE BYTE(BYTE, 0, 1, 0, 0, 1, 0, 1, 0)
    CALL IO.WRITE BYTE(BYTE, 0, 0, 1, 1, 0, 0, 1, 0)
    CALL IO.WRITE BYTE(BYTE, 0, 0, 1, 0, 0, 0, 1, 0)
    CALL IO.WRITE BYTE(BYTE, 1, 0, 0, 0, 0, 1, 0, 0)
    CALL IO.WRITE BYTE(BYTE, 0, 1, 0, 1, 0, 0, 0, 0)
  END HELLO WORLD
